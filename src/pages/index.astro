---
import Venn from "../components/venn.astro";
const metaImg = new URL("/venn-meta.png", Astro.url);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:image" content={metaImg} />
		<meta property="twitter:image" content={metaImg} />

		<title>Sponges Data</title>
		<style>
			path.number {
				pointer-events: none;
			}
		</style>
	</head>
	<body
		class="bg-gray-950 min-h-screen overflow-x-hidden overflow-y-auto grid place-items-center w-full p-6"
	>
		<div
			id="tooltip"
			class="absolute inline-block transition-opacity z-50 bg-gray-950 text-gray-100 pointer-events-none opacity-0 rounded-xl shadow-lg shadow-gray-900 max-w-lg max-h-[90vh] overflow-y-auto"
		>
		</div>
		<Venn />
	</body>
</html>
<script>
	import { actions } from "astro:actions";
	const { data, error } = await actions.getCombinedData();
	const $ = (tag: string) => document.querySelector(tag);
	const $$ = (tag: string) => document.querySelectorAll(tag);
	const $tooltip = $("#tooltip") as HTMLElement;
	const $vennIntersections = $$(
		"[data-names]",
	) as NodeListOf<HTMLElement>;
	const showTooltipStyles = ["pointer-events-all", "opacity-100"];
	const hideTooltipStyles = ["pointer-events-none", "opacity-0"];
	const defaultOpacity = "0.5";
	let mouseX = 0,
		mouseY = 0;
	let tooltipX = 0,
		tooltipY = 0;
	let isMouseOverTooltip = false;
	const $svgVenn = $("#venn")!;

	const addTooltipStyles = () => {
		$tooltip.classList.remove(...hideTooltipStyles);
		$tooltip.classList.add(...showTooltipStyles);
	};

	const createSpeciesItem = (content: string) => {
		const li = document.createElement("li");
		const span = document.createElement("span");

		span.textContent = content;

		li.appendChild(span);

		return li;
	};

	const showTooltipContent = (species: string[]) => {
		const ul = document.createElement("ul");
		ul.classList.add("flex", "flex-col", "gap-y-2", "px-5", "py-4");
		if (species.length > 0)
			species.forEach((s, idx) =>
				ul.appendChild(
					createSpeciesItem(`${idx + 1}. ${s}`),
				),
			);
		else ul.appendChild(createSpeciesItem("No species"));

		return ul;
	};

	const showTotal = (species: string[]) => {
		const span = document.createElement("span");
		span.classList.add(
			"inline-block",
			"whitespace-nowrap",
			"font-semibold",
			"text-lg",
		);
		span.textContent = `Total: ${species.length}`;

		return span;
	};

	const showHeader = (titlesString: string, species: string[]) => {
		const header = document.createElement("header");
		const title = document.createElement("h3");

		header.classList.add(
			"sticky",
			"top-0",
			"flex",
			"items-center",
			"justify-between",
			"gap-x-6",
			"bg-gray-950",
			"py-4",
			"px-5",
			"shadow",
			"shadow-gray-800",
		);
		title.classList.add(
			"uppercase",
			"font-semibold",
			"text-gray-400",
			"text-lg",
		);

		title.textContent = titlesString.replaceAll(",", " / ");

		header.append(title, showTotal(species));
		return header;
	};

	const intersectionEnter = (e: MouseEvent) => {
		$tooltip.textContent = "";
		const node = e.target! as HTMLElement;
		const activeOpacity = "0.7";
		const names = (node.dataset.names ?? "").toLowerCase();
		const species = data![names]!;
		node.setAttribute("fill-opacity", activeOpacity);
		node.setAttribute("stroke-opacity", activeOpacity);
		addTooltipStyles();
		$tooltip.append(
			showHeader(names, species),
			showTooltipContent(species),
		);
	};

	const intersectionLeave = (e: MouseEvent) => {
		const node = e.target! as HTMLElement;
		node.setAttribute("fill-opacity", defaultOpacity);
		node.setAttribute("stroke-opacity", defaultOpacity);

		//removeTooltipStyles();
	};

	const onMouseMove = (e: MouseEvent) => {
		if (!isMouseOverTooltip) {
			mouseX = e.clientX + 30;
			mouseY = e.clientY - $tooltip.clientHeight;
		}
		const windowWidth = window.innerWidth; // Visible width of the viewport
		const windowHeight = window.innerHeight; // Visible height of the viewport
		const tooltipRect = $tooltip.getBoundingClientRect(); // Tooltip dimensions relative to viewport

		const divHeight = tooltipRect.height;
		const divWidth = tooltipRect.width;

		// Prevent tooltip from going off the top of the viewport
		if (mouseY < 0) {
			mouseY = 0;
		}

		// Prevent tooltip from going off the bottom of the viewport
		if (mouseY + divHeight > windowHeight) {
			mouseY = windowHeight - divHeight;
		}

		// Prevent tooltip from going off the left of the viewport
		if (mouseX < 0) {
			mouseX = 0;
		}

		// Prevent tooltip from going off the right of the viewport
		if (mouseX + divWidth > windowWidth) {
			mouseX = windowWidth - divWidth;
		}
	};

	function animateTooltip() {
		if (!isMouseOverTooltip) {
			// Interpolation factor (the smaller, the slower the div follows)
			const speed = 0.3;

			tooltipX += (mouseX - tooltipX) * speed;
			tooltipY += (mouseY - tooltipY) * speed;

			$tooltip.setAttribute(
				"style",
				`top:${tooltipY}px;left:${tooltipX}px`,
			);
		}

		// Use requestAnimationFrame for smooth animations
		requestAnimationFrame(animateTooltip);
	}

	if (error) console.error(error);
	else {
		$tooltip.addEventListener(
			"mouseenter",
			() => (isMouseOverTooltip = true),
		);
		$tooltip.addEventListener("mouseleave", () => {
			isMouseOverTooltip = false;
			mouseX = tooltipX;
			mouseY = tooltipY;
		});
		document.addEventListener("mousemove", onMouseMove);

		$vennIntersections.forEach((node) => {
			node.setAttribute("fill-opacity", defaultOpacity);
			node.setAttribute("stroke-opacity", defaultOpacity);
			node.addEventListener("mouseenter", intersectionEnter);
			node.addEventListener("mouseleave", intersectionLeave);
		});
		animateTooltip();
	}
</script>
